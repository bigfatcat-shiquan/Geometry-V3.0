<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "mybatis-3-mapper.dtd">
<mapper namespace="dao.ProblemDao">

    <cache eviction="LRU" flushInterval="3600000" size="512" readOnly="true" />

    <resultMap id="problemMap" type="problem">
        <id property="problem_id" column="problem_id"/>
        <result property="problem_name" column="problem_name"/>
        <result property="problem_picture" column="problem_picture"/>
        <result property="problem_author_id" column="problem_author_id"/>
        <result property="create_date" column="create_date"/>
        <result property="initial_points_set" column="initial_points_set"
                typeHandler="dao.handler.SetToVarcharTypeHandler"/>
        <result property="points_location_x" column="points_location_x"
                typeHandler="dao.handler.HashMapToVarcharTypeHandler"/>
        <result property="points_location_y" column="points_location_y"
                typeHandler="dao.handler.HashMapToVarcharTypeHandler"/>
        <result property="initial_equals_str_set" column="initial_equals_str_set"
                typeHandler="dao.handler.SetToVarcharTypeHandler"/>
        <result property="need_prove_equal_str" column="need_prove_equal_str"/>
    </resultMap>

    <insert id="insertOne" parameterType="problem">
        INSERT INTO problem (problem_id, problem_name, problem_picture, problem_author_id, create_date,
        initial_points_set, points_location_x, points_location_y, initial_equals_str_set, need_prove_equal_str)
        VALUES (null, #{problem.problem_name}, #{problem.problem_picture}, #{problem.problem_author_id},
        #{problem.create_date},
        #{problem.initial_points_set, typeHandler=dao.handler.SetToVarcharTypeHandler},
        #{problem.points_location_x, typeHandler=dao.handler.HashMapToVarcharTypeHandler},
        #{problem.points_location_y, typeHandler=dao.handler.HashMapToVarcharTypeHandler},
        #{problem.initial_equals_str_set, typeHandler=dao.handler.SetToVarcharTypeHandler},
        #{problem.need_prove_equal_str})
    </insert>

    <delete id="deleteOne" parameterType="int">
        DELETE FROM problem
        <where>
            problem_id = #{problem_id}
        </where>
    </delete>
    
    <update id="updateOne" parameterType="problem">
        UPDATE problem
        <set>
            <if test="problem.problem_name != null">problem_name = #{problem.problem_name}, </if>
            <if test="problem.problem_picture != null">problem_picture = #{problem.problem_picture}, </if>
            <if test="problem.initial_points_set != null">
                initial_points_set = #{problem.initial_points_set, typeHandler=dao.handler.SetToVarcharTypeHandler},
            </if>
            <if test="problem.points_location_x != null">
                points_location_x = #{problem.points_location_x, typeHandler=dao.handler.HashMapToVarcharTypeHandler},
            </if>
            <if test="problem.points_location_y != null">
                points_location_y = #{problem.points_location_y, typeHandler=dao.handler.HashMapToVarcharTypeHandler},
            </if>
            <if test="problem.initial_equals_str_set != null">
                initial_equals_str_set = #{problem.initial_equals_str_set, typeHandler=dao.handler.SetToVarcharTypeHandler},
            </if>
            <if test="problem.need_prove_equal_str != null">need_prove_equal_str = #{problem.need_prove_equal_str}</if>
        </set>
        <where>
            problem_id = #{problem.problem_id}
        </where>
    </update>

    <select id="selectOne" resultMap="problemMap" parameterType="int">
        SELECT problem_id, problem_name, problem_picture, problem_author_id, create_date, initial_points_set,
        points_location_x, points_location_y, initial_equals_str_set, need_prove_equal_str FROM problem
        <where>
            problem_id = #{problem_id}
        </where>
    </select>

    <select id="select" resultMap="problemMap">
        SELECT problem_id, problem_name, problem_picture, problem_author_id, create_date, initial_points_set,
        points_location_x, points_location_y, initial_equals_str_set, need_prove_equal_str FROM problem
        <where>
            <if test="problem_author_id != null">problem_author_id = #{problem_author_id}</if>
            <if test="problem_name != null">and problem_name LIKE concat('%',#{problem_name},'%')</if>
            <if test="start_dt != null">and create_date &gt;= #{start_dt}</if>
            <if test="end_dt != null">and create_date &lt;= #{end_dt}</if>
        </where>
    </select>

</mapper>